// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinhasFinancas.Data;

namespace MinhasFinancas.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Ano", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Descricao");

                    b.HasKey("ID");

                    b.ToTable("Ano");
                });

            modelBuilder.Entity("MinhasFinancas.Models.CategoriaDespesa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("PorcentagemIdeal");

                    b.HasKey("ID");

                    b.ToTable("CategoriaDespesa");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Conta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agencia");

                    b.Property<string>("ContaBancaria");

                    b.Property<DateTime>("DataCadastro");

                    b.Property<DateTime>("DataUltimaAtualizacao");

                    b.Property<int>("PessoaID");

                    b.Property<string>("SaldoEmConta");

                    b.Property<int>("TipoContaID");

                    b.Property<bool>("flagAtivo");

                    b.HasKey("ID");

                    b.HasIndex("PessoaID");

                    b.HasIndex("TipoContaID");

                    b.ToTable("Conta");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Despesa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaDespesaID");

                    b.Property<DateTime>("DataCadastro");

                    b.Property<DateTime?>("DataPagamento");

                    b.Property<DateTime>("DataUltimaAtualizacao");

                    b.Property<DateTime>("DataVencimento");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("FormaPagamentoID");

                    b.Property<int>("PessoaID");

                    b.Property<int>("StatusDespesaID");

                    b.Property<string>("ValorAPagar")
                        .IsRequired();

                    b.Property<string>("ValorPago");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaDespesaID");

                    b.HasIndex("FormaPagamentoID");

                    b.HasIndex("PessoaID");

                    b.HasIndex("StatusDespesaID");

                    b.ToTable("Despesa");
                });

            modelBuilder.Entity("MinhasFinancas.Models.FormaPagamento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("ID");

                    b.ToTable("FormaPagamento");
                });

            modelBuilder.Entity("MinhasFinancas.Models.FormaRecebimento", b =>
                {
                    b.Property<int>("FormaRecebimento_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("FormaRecebimento_ID");

                    b.ToTable("FormaRecebimento");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Investimentos.RendaVariavel.Acao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataNegociacao");

                    b.Property<int>("EmpresaListadaID");

                    b.Property<int>("PessoaID");

                    b.Property<int>("QuantidadeCompra");

                    b.Property<int>("TipoMercadoID");

                    b.Property<int>("TipoMovimentoID");

                    b.Property<string>("ValorCompra");

                    b.Property<string>("ValorCorretagem");

                    b.Property<string>("ValorISS");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaListadaID");

                    b.HasIndex("PessoaID");

                    b.HasIndex("TipoMercadoID");

                    b.HasIndex("TipoMovimentoID");

                    b.ToTable("Acao");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Investimentos.RendaVariavel.EmpresaListada", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoAcao");

                    b.Property<string>("NomeDePregao");

                    b.Property<int>("SetorEmpresaID");

                    b.HasKey("ID");

                    b.HasIndex("SetorEmpresaID");

                    b.ToTable("EmpresaListada");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Investimentos.RendaVariavel.SetorEmpresa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descricao")
                        .HasMaxLength(150);

                    b.HasKey("ID");

                    b.ToTable("SetorEmpresa");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Investimentos.RendaVariavel.TipoMercado", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descricao")
                        .HasMaxLength(150);

                    b.Property<string>("observacao")
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.ToTable("TipoMercado");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Investimentos.RendaVariavel.TipoMovimento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasMaxLength(150);

                    b.HasKey("ID");

                    b.ToTable("TipoMovimento");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Mes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("NumeroMes");

                    b.HasKey("ID");

                    b.ToTable("Mes");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Pessoa", b =>
                {
                    b.Property<int>("Pessoa_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TipoPessoaID");

                    b.Property<DateTime>("dataCadastro");

                    b.Property<DateTime>("dataUltimaAlteracao");

                    b.Property<string>("documento")
                        .HasMaxLength(18);

                    b.Property<bool>("flagCadastroAtivo");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Pessoa_ID");

                    b.HasIndex("TipoPessoaID");

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("MinhasFinancas.Models.Receita", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCadastro");

                    b.Property<DateTime?>("DataDeRecebimento");

                    b.Property<DateTime>("DataPrevistaRecebimento");

                    b.Property<DateTime>("DataUltimaAtualizacao");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("FormaRecebimentoID");

                    b.Property<int>("PessoaID");

                    b.Property<int>("StatusReceitaID");

                    b.Property<int>("TipoReceitaID");

                    b.Property<string>("ValorAReceber")
                        .IsRequired();

                    b.Property<string>("ValorRecebido");

                    b.HasKey("ID");

                    b.HasIndex("FormaRecebimentoID");

                    b.HasIndex("PessoaID");

                    b.HasIndex("StatusReceitaID");

                    b.HasIndex("TipoReceitaID");

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("MinhasFinancas.Models.StatusDespesa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("StatusDespesa");
                });

            modelBuilder.Entity("MinhasFinancas.Models.StatusInvestimento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("StatusInvestimento");
                });

            modelBuilder.Entity("MinhasFinancas.Models.StatusMeta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("StatusMeta");
                });

            modelBuilder.Entity("MinhasFinancas.Models.StatusReceita", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("StatusReceita");
                });

            modelBuilder.Entity("MinhasFinancas.Models.TipoConta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("ID");

                    b.ToTable("TipoConta");
                });

            modelBuilder.Entity("MinhasFinancas.Models.TipoInvestimento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("TipoInvestimento");
                });

            modelBuilder.Entity("MinhasFinancas.Models.TipoPessoa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("ID");

                    b.ToTable("TipoPessoa");
                });

            modelBuilder.Entity("MinhasFinancas.Models.TipoReceita", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("ID");

                    b.ToTable("TipoReceita");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MinhasFinancas.Models.Conta", b =>
                {
                    b.HasOne("MinhasFinancas.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.TipoConta", "TipoConta")
                        .WithMany()
                        .HasForeignKey("TipoContaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MinhasFinancas.Models.Despesa", b =>
                {
                    b.HasOne("MinhasFinancas.Models.CategoriaDespesa", "CategoriaDespesa")
                        .WithMany()
                        .HasForeignKey("CategoriaDespesaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.FormaPagamento", "FormaPagamento")
                        .WithMany()
                        .HasForeignKey("FormaPagamentoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.StatusDespesa", "StatusDespesa")
                        .WithMany()
                        .HasForeignKey("StatusDespesaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MinhasFinancas.Models.Investimentos.RendaVariavel.Acao", b =>
                {
                    b.HasOne("MinhasFinancas.Models.Investimentos.RendaVariavel.EmpresaListada", "EmpresaListada")
                        .WithMany()
                        .HasForeignKey("EmpresaListadaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.Investimentos.RendaVariavel.TipoMercado", "TipoMercado")
                        .WithMany()
                        .HasForeignKey("TipoMercadoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.Investimentos.RendaVariavel.TipoMovimento", "TipoMovimento")
                        .WithMany()
                        .HasForeignKey("TipoMovimentoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MinhasFinancas.Models.Investimentos.RendaVariavel.EmpresaListada", b =>
                {
                    b.HasOne("MinhasFinancas.Models.Investimentos.RendaVariavel.SetorEmpresa", "SetorEmpresa")
                        .WithMany()
                        .HasForeignKey("SetorEmpresaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MinhasFinancas.Models.Pessoa", b =>
                {
                    b.HasOne("MinhasFinancas.Models.TipoPessoa", "TipoPessoa")
                        .WithMany()
                        .HasForeignKey("TipoPessoaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MinhasFinancas.Models.Receita", b =>
                {
                    b.HasOne("MinhasFinancas.Models.FormaRecebimento", "FormaRecebimento")
                        .WithMany()
                        .HasForeignKey("FormaRecebimentoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.StatusReceita", "StatusReceita")
                        .WithMany()
                        .HasForeignKey("StatusReceitaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinhasFinancas.Models.TipoReceita", "TipoReceita")
                        .WithMany()
                        .HasForeignKey("TipoReceitaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
